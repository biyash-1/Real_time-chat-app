"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chatpage/page",{

/***/ "(app-pages-browser)/./app/store/useChatStore.ts":
/*!***********************************!*\
  !*** ./app/store/useChatStore.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChatStore: () => (/* binding */ useChatStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var _useAuthStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useAuthStore */ \"(app-pages-browser)/./app/store/useAuthStore.ts\");\n\n\nconst useChatStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set, get)=>({\n        messages: [],\n        users: [],\n        socket: null,\n        selectedUser: null,\n        isUserLoading: false,\n        isMessagesLoading: false,\n        setSelectedUser: (selectedUser)=>set({\n                selectedUser\n            }),\n        getUsers: async ()=>{\n            set({\n                isUserLoading: true\n            });\n            try {\n                const response = await fetch(\"\".concat(BASE_URL, \"/api/message/getUsers\"), {\n                    method: \"GET\",\n                    credentials: \"include\"\n                });\n                const data = await response.json();\n                set({\n                    users: data\n                });\n            } catch (error) {\n                console.error(\"Failed to fetch users:\", error);\n            } finally{\n                set({\n                    isUserLoading: false\n                });\n            }\n        },\n        getMessages: async (userId)=>{\n            set({\n                isMessagesLoading: true\n            });\n            try {\n                const response = await fetch(\"\".concat(BASE_URL, \"/api/message/\").concat(userId), {\n                    method: \"GET\",\n                    credentials: \"include\"\n                });\n                const data = await response.json();\n                set({\n                    messages: data\n                });\n            } catch (error) {\n                console.error(\"Failed to fetch messages for user \".concat(userId, \":\"), error);\n            } finally{\n                set({\n                    isMessagesLoading: false\n                });\n            }\n        },\n        deleteMessage: async (messageId)=>{\n            const { messages } = get();\n            try {\n                const response = await fetch(\"\".concat(BASE_URL, \"/api/message/delete/\").concat(messageId), {\n                    method: \"DELETE\",\n                    credentials: \"include\"\n                });\n                if (!response.ok) {\n                    throw new Error(\"Failed to delete message\");\n                }\n                set({\n                    messages: messages.filter((message)=>message._id !== messageId)\n                });\n            } catch (error) {\n                console.error(\"Failed to delete message \".concat(messageId, \":\"), error);\n            } finally{\n                set({\n                    isMessagesLoading: false\n                });\n            }\n        },\n        // Ensure `messages` is always an array\n        // if (!Array.isArray(messages)) {\n        //   console.error(\"Messages state is not an array.\");\n        //   return;\n        // }\n        sendMessage: async (messageData)=>{\n            const { selectedUser, messages } = get();\n            if (!selectedUser) {\n                console.error(\"No selected user.\");\n                return;\n            }\n            try {\n                const response = await fetch(\"\".concat(BASE_URL, \"/api/message/send/\").concat(selectedUser._id), {\n                    method: \"POST\",\n                    credentials: \"include\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(messageData)\n                });\n                if (!response.ok) {\n                    throw new Error(\"Failed to send message\");\n                }\n                const data = await response.json();\n                // Ensure the response contains the necessary data\n                if (!data || !data._id) {\n                    console.error(\"Invalid message data received from server:\", data);\n                    return;\n                }\n                // Ensure messages is initialized as an array\n                const updatedMessages = Array.isArray(messages) ? messages : [];\n                set({\n                    messages: [\n                        ...updatedMessages,\n                        data\n                    ]\n                });\n            } catch (error) {\n                console.error(\"Error sending message:\", error);\n            }\n        },\n        subscribeToMessages: ()=>{\n            const { selectedUser } = get();\n            console.log(\"selected user\", selectedUser);\n            if (!selectedUser) {\n                console.error(\"Socket or selected user is not available\");\n                return;\n            }\n            const socket = _useAuthStore__WEBPACK_IMPORTED_MODULE_0__.useAuthStore.getState().socket;\n            console.log(\"socket is\", socket);\n            if (!socket) {\n                return;\n            }\n            socket === null || socket === void 0 ? void 0 : socket.off(\"newMessage\"); // Clear previous listeners\n            socket === null || socket === void 0 ? void 0 : socket.on(\"newMessage\", (newMessage)=>{\n                if (newMessage.sender === selectedUser._id) {\n                    set({\n                        messages: [\n                            ...get().messages,\n                            newMessage\n                        ]\n                    });\n                }\n            });\n        },\n        unsubscribeFromMessages: ()=>{\n            const socket = get().socket;\n            if (socket) {\n                try {\n                    socket.off(\"newMessage\");\n                    console.log(\"Unsubscribed from newMessage event\");\n                } catch (error) {\n                    console.error(\"Error unsubscribing from messages:\", error);\n                }\n            } else {\n                console.log(\"Socket is not initialized, skipping unsubscribe\");\n            }\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/store/useChatStore.ts\n"));

/***/ })

});