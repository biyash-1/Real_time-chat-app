"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chatpage/page",{

/***/ "(app-pages-browser)/./app/store/useChatStore.ts":
/*!***********************************!*\
  !*** ./app/store/useChatStore.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChatStore: () => (/* binding */ useChatStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var _useAuthStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useAuthStore */ \"(app-pages-browser)/./app/store/useAuthStore.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\nconst BASE_URL = process.env.MODE === \"development\" ? \"http://localhost:3001\" : \"https://real-time-chat-app-hu1a.onrender.com\";\nconst useChatStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set, get)=>({\n        messages: [],\n        users: [],\n        socket: null,\n        selectedUser: null,\n        isUserLoading: false,\n        isMessagesLoading: false,\n        setSelectedUser: (selectedUser)=>set({\n                selectedUser\n            }),\n        getUsers: async ()=>{\n            set({\n                isUserLoading: true\n            });\n            try {\n                const response = await fetch(\"\".concat(BASE_URL, \"/api/message/getUsers\"), {\n                    method: \"GET\",\n                    credentials: \"include\"\n                });\n                const data = await response.json();\n                set({\n                    users: data\n                });\n            } catch (error) {\n                console.error(\"Failed to fetch users:\", error);\n            } finally{\n                set({\n                    isUserLoading: false\n                });\n            }\n        },\n        getMessages: async (userId)=>{\n            set({\n                isMessagesLoading: true\n            });\n            try {\n                const response = await fetch(\"\".concat(BASE_URL, \"/api/message/\").concat(userId), {\n                    method: \"GET\",\n                    credentials: \"include\"\n                });\n                const data = await response.json();\n                set({\n                    messages: data\n                });\n            } catch (error) {\n                console.error(\"Failed to fetch messages for user \".concat(userId, \":\"), error);\n            } finally{\n                set({\n                    isMessagesLoading: false\n                });\n            }\n        },\n        deleteMessage: async (messageId)=>{\n            const { messages } = get();\n            try {\n                const response = await fetch(\"\".concat(BASE_URL, \"/api/message/delete/\").concat(messageId), {\n                    method: \"DELETE\",\n                    credentials: \"include\"\n                });\n                if (!response.ok) {\n                    throw new Error(\"Failed to delete message\");\n                }\n                set({\n                    messages: messages.filter((message)=>message._id !== messageId)\n                });\n            } catch (error) {\n                console.error(\"Failed to delete message \".concat(messageId, \":\"), error);\n            } finally{\n                set({\n                    isMessagesLoading: false\n                });\n            }\n        },\n        // Ensure `messages` is always an array\n        // if (!Array.isArray(messages)) {\n        //   console.error(\"Messages state is not an array.\");\n        //   return;\n        // }\n        sendMessage: async (messageData)=>{\n            const { selectedUser, messages } = get();\n            if (!selectedUser) {\n                console.error(\"No selected user.\");\n                return;\n            }\n            try {\n                const response = await fetch(\"\".concat(BASE_URL, \"/api/message/send/\").concat(selectedUser._id), {\n                    method: \"POST\",\n                    credentials: \"include\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(messageData)\n                });\n                if (!response.ok) {\n                    throw new Error(\"Failed to send message\");\n                }\n                const data = await response.json();\n                // Ensure the response contains the necessary data\n                if (!data || !data._id) {\n                    console.error(\"Invalid message data received from server:\", data);\n                    return;\n                }\n                // Ensure messages is initialized as an array\n                const updatedMessages = Array.isArray(messages) ? messages : [];\n                set({\n                    messages: [\n                        ...updatedMessages,\n                        data\n                    ]\n                });\n            } catch (error) {\n                console.error(\"Error sending message:\", error);\n            }\n        },\n        subscribeToMessages: ()=>{\n            const { selectedUser } = get();\n            console.log(\"selected user\", selectedUser);\n            if (!selectedUser) {\n                console.error(\"Socket or selected user is not available\");\n                return;\n            }\n            const socket = _useAuthStore__WEBPACK_IMPORTED_MODULE_0__.useAuthStore.getState().socket;\n            console.log(\"socket is\", socket);\n            if (!socket) {\n                return;\n            }\n            socket === null || socket === void 0 ? void 0 : socket.off(\"newMessage\"); // Clear previous listeners\n            socket === null || socket === void 0 ? void 0 : socket.on(\"newMessage\", (newMessage)=>{\n                if (newMessage.sender === selectedUser._id) {\n                    set({\n                        messages: [\n                            ...get().messages,\n                            newMessage\n                        ]\n                    });\n                }\n            });\n        },\n        unsubscribeFromMessages: ()=>{\n            const socket = get().socket;\n            if (socket) {\n                try {\n                    socket.off(\"newMessage\");\n                    console.log(\"Unsubscribed from newMessage event\");\n                } catch (error) {\n                    console.error(\"Error unsubscribing from messages:\", error);\n                }\n            } else {\n                console.log(\"Socket is not initialized, skipping unsubscribe\");\n            }\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9zdG9yZS91c2VDaGF0U3RvcmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUVhO0FBRTlDLE1BQU1FLFdBQVdDLE9BQU9BLENBQUNDLEdBQUcsQ0FBQ0MsSUFBSSxLQUFLLGdCQUFnQiwwQkFBMEJGLDhDQUErQjtBQW1DeEcsTUFBTUksZUFBZVAsK0NBQU1BLENBQWlCLENBQUNRLEtBQUtDLE1BQVM7UUFDaEVDLFVBQVUsRUFBRTtRQUNaQyxPQUFPLEVBQUU7UUFDVEMsUUFBUTtRQUNSQyxjQUFjO1FBQ2RDLGVBQWU7UUFDZkMsbUJBQW1CO1FBRW5CQyxpQkFBaUIsQ0FBQ0gsZUFBaUJMLElBQUk7Z0JBQUVLO1lBQWE7UUFFdERJLFVBQVU7WUFDUlQsSUFBSTtnQkFBRU0sZUFBZTtZQUFLO1lBQzFCLElBQUk7Z0JBQ0YsTUFBTUksV0FBVyxNQUFNQyxNQUFNLEdBQVksT0FBVGpCLFVBQVMsMEJBQXdCO29CQUMvRGtCLFFBQVE7b0JBQ1JDLGFBQWE7Z0JBQ2Y7Z0JBQ0EsTUFBTUMsT0FBTyxNQUFNSixTQUFTSyxJQUFJO2dCQUNoQ2YsSUFBSTtvQkFBRUcsT0FBT1c7Z0JBQUs7WUFDcEIsRUFBRSxPQUFPRSxPQUFPO2dCQUNkQyxRQUFRRCxLQUFLLENBQUMsMEJBQTBCQTtZQUMxQyxTQUFVO2dCQUNSaEIsSUFBSTtvQkFBRU0sZUFBZTtnQkFBTTtZQUM3QjtRQUNGO1FBRUFZLGFBQWEsT0FBT0M7WUFDbEJuQixJQUFJO2dCQUFFTyxtQkFBbUI7WUFBSztZQUM5QixJQUFJO2dCQUNGLE1BQU1HLFdBQVcsTUFBTUMsTUFBTSxHQUEyQlEsT0FBeEJ6QixVQUFTLGlCQUFzQixPQUFQeUIsU0FBVTtvQkFDaEVQLFFBQVE7b0JBQ1JDLGFBQWE7Z0JBQ2Y7Z0JBQ0EsTUFBTUMsT0FBTyxNQUFNSixTQUFTSyxJQUFJO2dCQUNoQ2YsSUFBSTtvQkFBRUUsVUFBVVk7Z0JBQUs7WUFDdkIsRUFBRSxPQUFPRSxPQUFPO2dC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RTNCLElBQUlBLFFBQVE7Z0JBQ1YsSUFBSTtvQkFDRkEsT0FBT21DLEdBQUcsQ0FBQztvQkFDWHRCLFFBQVFvQixHQUFHLENBQUM7Z0JBQ2QsRUFBRSxPQUFPckIsT0FBTztvQkFDZEMsUUFBUUQsS0FBSyxDQUFDLHNDQUFzQ0E7Z0JBQ3REO1lBQ0YsT0FBTztnQkFDTEMsUUFBUW9CLEdBQUcsQ0FBQztZQUNkO1FBQ0Y7SUFFRixJQUFJIiwic291cmNlcyI6WyJEOlxccmVhbHRpbWVfQ2hhdGFwcFxcZnJvbnRlbmRcXGFwcFxcc3RvcmVcXHVzZUNoYXRTdG9yZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGUgfSBmcm9tIFwienVzdGFuZFwiO1xyXG5pbXBvcnQgeyBTb2NrZXQgfSBmcm9tIFwic29ja2V0LmlvLWNsaWVudFwiO1xyXG5pbXBvcnQgeyB1c2VBdXRoU3RvcmUgfSBmcm9tIFwiLi91c2VBdXRoU3RvcmVcIjtcclxuXHJcbmNvbnN0IEJBU0VfVVJMID0gcHJvY2Vzcy5lbnYuTU9ERSA9PT0gXCJkZXZlbG9wbWVudFwiID8gXCJodHRwOi8vbG9jYWxob3N0OjMwMDFcIiA6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkw7XHJcblxyXG5cclxuaW50ZXJmYWNlIFVzZXIge1xyXG4gIF9pZDogc3RyaW5nO1xyXG4gIHVzZXJuYW1lOiBzdHJpbmc7XHJcbiAgZnVsbE5hbWU6IHN0cmluZztcclxuICBwcm9maWxlUGljdHVyZT86IHN0cmluZztcclxuICBpc09ubGluZTogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIE1lc3NhZ2Uge1xyXG4gIF9pZDogc3RyaW5nO1xyXG4gIHNlbmRlcjogc3RyaW5nO1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xyXG4gIHRleHQ/OiBzdHJpbmc7XHJcbiAgaW1hZ2U/OiBzdHJpbmcgfCBudWxsO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQ2hhdFN0b3JlU3RhdGUge1xyXG4gIG1lc3NhZ2VzOiBNZXNzYWdlW107XHJcbiAgc29ja2V0OiBTb2NrZXQgfCBudWxsO1xyXG4gIHVzZXJzOiBVc2VyW107XHJcbiAgc2VsZWN0ZWRVc2VyOiBVc2VyIHwgbnVsbDtcclxuICBpc1VzZXJMb2FkaW5nOiBib29sZWFuO1xyXG4gIGlzTWVzc2FnZXNMb2FkaW5nOiBib29sZWFuO1xyXG4gIGdldFVzZXJzOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xyXG4gIGdldE1lc3NhZ2VzOiAodXNlcklkOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XHJcbiAgZGVsZXRlTWVzc2FnZTogKG1lc3NhZ2VJZDogYW55KSA9PiBQcm9taXNlPHZvaWQ+O1xyXG4gIHNldFNlbGVjdGVkVXNlcjogKHNlbGVjdGVkVXNlcjogVXNlciB8IG51bGwpID0+IHZvaWQ7XHJcbiAgc2VuZE1lc3NhZ2U6IChtZXNzYWdlRGF0YTogT21pdDxNZXNzYWdlLCBcIl9pZFwiIHwgXCJjcmVhdGVkQXRcIj4pID0+IFByb21pc2U8dm9pZD47XHJcbiAgc3Vic2NyaWJlVG9NZXNzYWdlczogKCkgPT4gdm9pZDtcclxuICB1bnN1YnNjcmliZUZyb21NZXNzYWdlczogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUNoYXRTdG9yZSA9IGNyZWF0ZTxDaGF0U3RvcmVTdGF0ZT4oKHNldCwgZ2V0KSA9PiAoe1xyXG4gIG1lc3NhZ2VzOiBbXSxcclxuICB1c2VyczogW10sXHJcbiAgc29ja2V0OiBudWxsLFxyXG4gIHNlbGVjdGVkVXNlcjogbnVsbCxcclxuICBpc1VzZXJMb2FkaW5nOiBmYWxzZSxcclxuICBpc01lc3NhZ2VzTG9hZGluZzogZmFsc2UsXHJcblxyXG4gIHNldFNlbGVjdGVkVXNlcjogKHNlbGVjdGVkVXNlcikgPT4gc2V0KHsgc2VsZWN0ZWRVc2VyIH0pLFxyXG5cclxuICBnZXRVc2VyczogYXN5bmMgKCkgPT4ge1xyXG4gICAgc2V0KHsgaXNVc2VyTG9hZGluZzogdHJ1ZSB9KTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L2FwaS9tZXNzYWdlL2dldFVzZXJzYCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICBjcmVkZW50aWFsczogXCJpbmNsdWRlXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICBzZXQoeyB1c2VyczogZGF0YSB9KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggdXNlcnM6XCIsIGVycm9yKTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHNldCh7IGlzVXNlckxvYWRpbmc6IGZhbHNlIH0pO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGdldE1lc3NhZ2VzOiBhc3luYyAodXNlcklkOiBzdHJpbmcpID0+IHtcclxuICAgIHNldCh7IGlzTWVzc2FnZXNMb2FkaW5nOiB0cnVlIH0pO1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vYXBpL21lc3NhZ2UvJHt1c2VySWR9YCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICBjcmVkZW50aWFsczogXCJpbmNsdWRlXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICBzZXQoeyBtZXNzYWdlczogZGF0YSB9KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBmZXRjaCBtZXNzYWdlcyBmb3IgdXNlciAke3VzZXJJZH06YCwgZXJyb3IpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2V0KHsgaXNNZXNzYWdlc0xvYWRpbmc6IGZhbHNlIH0pO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGRlbGV0ZU1lc3NhZ2U6IGFzeW5jIChtZXNzYWdlSWQ6IGFueSkgPT4ge1xyXG4gICAgY29uc3QgeyBtZXNzYWdlcyB9ID0gZ2V0KCk7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9hcGkvbWVzc2FnZS9kZWxldGUvJHttZXNzYWdlSWR9YCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgICBjcmVkZW50aWFsczogXCJpbmNsdWRlXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGRlbGV0ZSBtZXNzYWdlXCIpO1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgc2V0KHsgbWVzc2FnZXM6IG1lc3NhZ2VzLmZpbHRlcigobWVzc2FnZSkgPT4gbWVzc2FnZS5faWQgIT09IG1lc3NhZ2VJZCkgfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZGVsZXRlIG1lc3NhZ2UgJHttZXNzYWdlSWR9OmAsIGVycm9yKTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHNldCh7IGlzTWVzc2FnZXNMb2FkaW5nOiBmYWxzZSB9KTtcclxuICAgIH1cclxuICB9LFxyXG4gIC8vIEVuc3VyZSBgbWVzc2FnZXNgIGlzIGFsd2F5cyBhbiBhcnJheVxyXG4gIC8vIGlmICghQXJyYXkuaXNBcnJheShtZXNzYWdlcykpIHtcclxuICAvLyAgIGNvbnNvbGUuZXJyb3IoXCJNZXNzYWdlcyBzdGF0ZSBpcyBub3QgYW4gYXJyYXkuXCIpO1xyXG4gIC8vICAgcmV0dXJuO1xyXG4gIC8vIH1cclxuXHJcbiAgc2VuZE1lc3NhZ2U6IGFzeW5jIChtZXNzYWdlRGF0YSkgPT4ge1xyXG4gICAgY29uc3QgeyBzZWxlY3RlZFVzZXIsIG1lc3NhZ2VzIH0gPSBnZXQoKTtcclxuICBcclxuICAgIGlmICghc2VsZWN0ZWRVc2VyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyBzZWxlY3RlZCB1c2VyLlwiKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vYXBpL21lc3NhZ2Uvc2VuZC8ke3NlbGVjdGVkVXNlci5faWR9YCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgY3JlZGVudGlhbHM6IFwiaW5jbHVkZVwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkobWVzc2FnZURhdGEpLFxyXG4gICAgICB9KTtcclxuICBcclxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBzZW5kIG1lc3NhZ2VcIik7XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICBcclxuICAgICAgLy8gRW5zdXJlIHRoZSByZXNwb25zZSBjb250YWlucyB0aGUgbmVjZXNzYXJ5IGRhdGFcclxuICAgICAgaWYgKCFkYXRhIHx8ICFkYXRhLl9pZCkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIG1lc3NhZ2UgZGF0YSByZWNlaXZlZCBmcm9tIHNlcnZlcjpcIiwgZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIC8vIEVuc3VyZSBtZXNzYWdlcyBpcyBpbml0aWFsaXplZCBhcyBhbiBhcnJheVxyXG4gICAgICBjb25zdCB1cGRhdGVkTWVzc2FnZXMgPSBBcnJheS5pc0FycmF5KG1lc3NhZ2VzKSA/IG1lc3NhZ2VzIDogW107XHJcbiAgICAgIHNldCh7IG1lc3NhZ2VzOiBbLi4udXBkYXRlZE1lc3NhZ2VzLCBkYXRhXSB9KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzZW5kaW5nIG1lc3NhZ2U6XCIsIGVycm9yKTtcclxuICAgIH1cclxuICB9LFxyXG4gIFxyXG4gIHN1YnNjcmliZVRvTWVzc2FnZXM6ICgpID0+IHtcclxuICAgIGNvbnN0IHsgc2VsZWN0ZWRVc2VyIH0gPSBnZXQoKTtcclxuICAgIGNvbnNvbGUubG9nKFwic2VsZWN0ZWQgdXNlclwiLHNlbGVjdGVkVXNlcik7XHJcbiAgICBcclxuICAgIFxyXG4gICAgaWYgKCFzZWxlY3RlZFVzZXIpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIlNvY2tldCBvciBzZWxlY3RlZCB1c2VyIGlzIG5vdCBhdmFpbGFibGVcIik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHNvY2tldCAgPSB1c2VBdXRoU3RvcmUuZ2V0U3RhdGUoKS5zb2NrZXQ7XHJcbiAgICBjb25zb2xlLmxvZyhcInNvY2tldCBpc1wiLHNvY2tldCk7XHJcbiAgICBcclxuICAgIGlmICghc29ja2V0KSB7XHJcblxyXG4gICAgICBcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHNvY2tldD8ub2ZmKFwibmV3TWVzc2FnZVwiKTsgLy8gQ2xlYXIgcHJldmlvdXMgbGlzdGVuZXJzXHJcbiAgICBzb2NrZXQ/Lm9uKFwibmV3TWVzc2FnZVwiLCAobmV3TWVzc2FnZTogTWVzc2FnZSkgPT4ge1xyXG4gICAgICBpZiAobmV3TWVzc2FnZS5zZW5kZXIgPT09IHNlbGVjdGVkVXNlci5faWQpIHtcclxuICAgICAgICBzZXQoeyBtZXNzYWdlczogWy4uLmdldCgpLm1lc3NhZ2VzLCBuZXdNZXNzYWdlXSB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgdW5zdWJzY3JpYmVGcm9tTWVzc2FnZXM6ICgpID0+IHtcclxuICAgIGNvbnN0IHNvY2tldCA9IGdldCgpLnNvY2tldDtcclxuICBcclxuICAgIGlmIChzb2NrZXQpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBzb2NrZXQub2ZmKFwibmV3TWVzc2FnZVwiKTsgXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJVbnN1YnNjcmliZWQgZnJvbSBuZXdNZXNzYWdlIGV2ZW50XCIpO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB1bnN1YnNjcmliaW5nIGZyb20gbWVzc2FnZXM6XCIsIGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coXCJTb2NrZXQgaXMgbm90IGluaXRpYWxpemVkLCBza2lwcGluZyB1bnN1YnNjcmliZVwiKTtcclxuICAgIH1cclxuICB9LFxyXG4gIFxyXG59KSk7XHJcbiJdLCJuYW1lcyI6WyJjcmVhdGUiLCJ1c2VBdXRoU3RvcmUiLCJCQVNFX1VSTCIsInByb2Nlc3MiLCJlbnYiLCJNT0RFIiwiTkVYVF9QVUJMSUNfQVBJX1VSTCIsInVzZUNoYXRTdG9yZSIsInNldCIsImdldCIsIm1lc3NhZ2VzIiwidXNlcnMiLCJzb2NrZXQiLCJzZWxlY3RlZFVzZXIiLCJpc1VzZXJMb2FkaW5nIiwiaXNNZXNzYWdlc0xvYWRpbmciLCJzZXRTZWxlY3RlZFVzZXIiLCJnZXRVc2VycyIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJjcmVkZW50aWFscyIsImRhdGEiLCJqc29uIiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0TWVzc2FnZXMiLCJ1c2VySWQiLCJkZWxldGVNZXNzYWdlIiwibWVzc2FnZUlkIiwib2siLCJFcnJvciIsImZpbHRlciIsIm1lc3NhZ2UiLCJfaWQiLCJzZW5kTWVzc2FnZSIsIm1lc3NhZ2VEYXRhIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwidXBkYXRlZE1lc3NhZ2VzIiwiQXJyYXkiLCJpc0FycmF5Iiwic3Vic2NyaWJlVG9NZXNzYWdlcyIsImxvZyIsImdldFN0YXRlIiwib2ZmIiwib24iLCJuZXdNZXNzYWdlIiwic2VuZGVyIiwidW5zdWJzY3JpYmVGcm9tTWVzc2FnZXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/store/useChatStore.ts\n"));

/***/ })

});